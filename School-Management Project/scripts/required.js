/*** @author admin*/var __myNameSpace 	= __myNameSpace || {};(function(){	var	baseFolder		= 'scripts/',	extension		= '.js',	filesToInclude	= ['utils' , 'errors'];		for(var i = 0 , file ; file = filesToInclude[i] ; i++){		include(baseFolder + file + extension);	}})();function loginHandler(login , password){	var	ERRORS			= __myNameSpace.ERRORS,	ROLES			= __myNameSpace.ROLES,	directoryROLES	= __myNameSpace.DirectoryROLES,	sessionRef 		= currentSession(),	promoteToken 	= sessionRef.promoteWith(ROLES.ADMINISTRATOR),	myUser 			= ds.User({ loginLowerCase : login.toLowerCase() }),	theGroups 		= [],	check			= true;		sessionRef.unPromote(promoteToken);		if (myUser === null) {		myUser = directory.internalStore.User.find('name=:1' , login);				if(myUser != null && directory.computeHA1(login, password) == myUser.password){			var			theGroupsTemp = myUser.groups.toArray('name');						for(var i = 0 ; i<theGroupsTemp.length ; i++){				theGroups.push(theGroupsTemp[i].name);			}						return {				name		: myUser.name,				fullName	: myUser.fullName,				belongsTo	: theGroups,				storage		: {					ID		: myUser.ID,					role 	: theGroups				}			}		}	}	else {		if (myUser.validatePassword(password)) {			switch (myUser.role) {				case ROLES.ADMINISTRATOR:				theGroups = [directoryROLES.ADMINISTRATOR];				break;								case ROLES.TEACHER:				theGroups = [directoryROLES.TEACHER];				break;								case ROLES.STUDENT:				theGroups = [directoryROLES.STUDENT];				break;								case ROLES.PARENT:				theGroups = [directoryROLES.PARENT];				break;								case ROLES.RECORDOFFICER:				theGroups = [directoryROLES.RECORDOFFICER];				break;								default:				logout();				return ERRORS.login.unknownRole;				break;			}						var connectTime = new Date();			return {				name		: login,				fullName	: myUser.fullname,				belongsTo	: theGroups,				storage		: {					time		: connectTime,					firstname 	: myUser.firstname.toUpperCase(),					lastname 	: myUser.lastname,					email		: myUser.email,					ID			: myUser.ID,					role 		: myUser.role				}			}					} else {			return ERRORS.login.passwordInvalid;		}	}		return ERRORS.login.notExist;}